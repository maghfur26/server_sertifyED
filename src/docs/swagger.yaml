openapi: 3.0.3
info:
  title: "SertifyEd API"
  description: |-
    Dokumentasi API untuk layanan SertifyEd.
    API ini menangani manajemen pengguna (institusi & siswa), penerbitan sertifikat digital yang terverifikasi di blockchain, dan verifikasi keasliannya.
  version: "1.0.0"
servers:
  - url: "http://localhost:5000/api"
    description: "Server Pengembangan Lokal"
  - url: "https://api.sertifyed.com/api"
    description: "Server Produksi"

tags:
  - name: "Auth"
    description: "Endpoint untuk Autentikasi dan Manajemen Pengguna"
  - name: "Certificate"
    description: "Endpoint untuk Menerbitkan dan Memverifikasi Sertifikat"
  - name: "File"
    description: "Endpoint untuk Mengakses File Statis"

paths:
  /auth/register/institution:
    post:
      tags:
        - "Auth"
      summary: "Registrasi Institusi Baru"
      description: "Mendaftarkan akun baru sebagai institusi penerbit sertifikat."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterInstitutionRequest"
      responses:
        "201":
          description: "Institusi berhasil terdaftar."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          description: "Email sudah digunakan."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /auth/register/user:
    post:
      tags:
        - "Auth"
      summary: "Registrasi Siswa Baru"
      description: "Mendaftarkan akun baru sebagai siswa/penerima sertifikat."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
      responses:
        "201":
          description: "Siswa berhasil terdaftar."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        "400":
          description: "Email sudah digunakan."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Login Pengguna"
      description: "Login untuk institusi atau siswa. Sistem akan otomatis mendeteksi tipe pengguna."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Login berhasil, mengembalikan token akses dan refresh."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessResponse"
        "401":
          description: "Kredensial tidak valid."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /auth/me:
    get:
      tags:
        - "Auth"
      summary: "Dapatkan Profil Pengguna"
      description: "Mengambil detail profil dari pengguna yang sedang login berdasarkan token."
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Profil pengguna berhasil diambil."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: "Tidak terautentikasi."

  /certificate:
    post:
      tags:
        - "Certificate"
      summary: "Terbitkan Sertifikat Baru"
      description: "Mengunggah file sertifikat (PDF/Gambar), menerbitkannya di blockchain, dan menyimpan metadatanya. Memerlukan autentikasi sebagai institusi."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                certificate:
                  type: string
                  format: binary
                  description: "File sertifikat (PDF, PNG, JPG)."
                studentName:
                  type: string
                  description: "Nama lengkap penerima."
                courseTitle:
                  type: string
                  description: "Judul sertifikat/pelatihan."
                issuerName:
                  type: string
                  description: "Nama institusi penerbit."
                recipientWallet:
                  type: string
                  description: "Alamat wallet blockchain penerima."
                certificateDescription:
                  type: string
                  description: "(Opsional) Deskripsi singkat."
                grade:
                  type: string
                  description: "(Opsional) Nilai atau predikat."
      responses:
        "201":
          description: "Sertifikat berhasil diterbitkan."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueCertificateResponse"
        "400":
          description: "Data yang dikirim tidak lengkap atau tidak valid."
        "401":
          description: "Tidak terautentikasi atau bukan institusi."

  /certificate/{tokenId}:
    get:
      tags:
        - "Certificate"
      summary: "Verifikasi Sertifikat by Token ID"
      description: "Mengambil data lengkap sertifikat dari database dan membandingkannya dengan data di blockchain untuk verifikasi."
      parameters:
        - name: "tokenId"
          in: "path"
          required: true
          description: "ID unik sertifikat di blockchain."
          schema:
            type: integer
      responses:
        "200":
          description: "Sertifikat ditemukan dan valid."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/Certificate"
        "404":
          description: "Sertifikat tidak ditemukan."

  /certificate/owner:
    post:
      tags:
        - "Certificate"
      summary: "Dapatkan Sertifikat Milik Pengguna"
      description: "Mengambil daftar semua sertifikat yang dimiliki oleh sebuah alamat wallet."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                walletAddress:
                  type: string
                  description: "Alamat wallet blockchain milik siswa."
                  example: "0xAlamatWalletSiswa..."
      responses:
        "200":
          description: "Daftar sertifikat berhasil diambil."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  offChainCertificates:
                    type: array
                    items:
                      $ref: "#/components/schemas/Certificate"
        "404":
          description: "Sertifikat tidak ditemukan untuk alamat tersebut."

  /uploads/{filename}:
    get:
      tags:
        - "File"
      summary: "Akses File Sertifikat"
      description: "Menampilkan file gambar/PDF dari sertifikat yang telah diunggah."
      parameters:
        - name: "filename"
          in: "path"
          required: true
          description: "Nama file yang didapat dari record sertifikat."
          schema:
            type: string
      responses:
        "200":
          description: "File berhasil ditampilkan."
          content:
            image/png: {}
            image/jpeg: {}
            application/pdf: {}
        "404":
          description: "File tidak ditemukan."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterInstitutionRequest:
      type: object
      properties:
        institutionName:
          type: string
          example: "Universitas Bina Sarana Informatika"
        email:
          type: string
          format: email
          example: "contact@bsi.ac.id"
        password:
          type: string
          format: password
          example: "password123"
        address:
          type: string
          example: "0x1234567890123456789012345678901234567890"

    RegisterUserRequest:
      type: object
      properties:
        fullname:
          type: string
          example: "Ahmad Sofi Sidik"
        email:
          type: string
          format: email
          example: "ahmad.sofi@example.com"
        password:
          type: string
          format: password
          example: "password123"
        address:
          type: string
          example: "0x0987654321098765432109876543210987654321"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "contact@bsi.ac.id"
        password:
          type: string
          format: password
          example: "password123"

    LoginSuccessResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            owner:
              type: string
            role:
              type: string

    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        institutionName:
          type: string
        address:
          type: string
        role:
          type: string

    IssueCertificateResponse:
      type: object
      properties:
        message:
          type: string
        tokenId:
          type: integer
        transactionHash:
          type: string

    Certificate:
      type: object
      properties:
        _id:
          type: string
        studentName:
          type: string
        courseTitle:
          type: string
        issueDate:
          type: string
          format: date-time
        issuerName:
          type: string
        recipientWallet:
          type: string
        certificateDescription:
          type: string
        grade:
          type: string
        tokenId:
          type: integer
        transactionHash:
          type: string
        dataHash:
          type: string
        organization:
          type: string
          description: "ID Organisasi penerbit"
        file:
          type: string
          description: "ID File sertifikat"

    SuccessMessage:
      type: object
      properties:
        message:
          type: string

    ErrorMessage:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
